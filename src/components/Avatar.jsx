/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/67fc054bed51bc585e271473.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'
import * as Three from 'three'

export function Avatar(props) {

    const { animation } = props;

    // use leva for controls
    const { headFollow, cursorFollow, wireframe } = useControls({
        headFollow: false,
        cursorFollow: false,
        wireframe: false,

    })
    const group = useRef()

    // add avatar model
    const { scene } = useGLTF('models/67fc054bed51bc585e271473.glb')

    // add typing animations to avatar
    const { animations: typingAnimation } = useFBX('animations/Typing.fbx')
    // console.log(typingAnimation);
    typingAnimation[0].name = 'Typing';

    // add Falling animations to avatar
    const { animations: fallingAnimation } = useFBX('animations/Falling Idle.fbx')
    fallingAnimation[0].name = 'Falling';

    // add Standing idle animations to avatar
    const { animations: standingAnimation } = useFBX('animations/Standing Idle.fbx')
    standingAnimation[0].name = 'Standing';


    // action to animation to be play
    const { actions } = useAnimations([typingAnimation[0], fallingAnimation[0], standingAnimation[0]], group);

    // follow for now at camara  && cursor 
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position);
        }
        if (cursorFollow) {
            const target = new Three.Vector3(state.mouse.x, state.mouse.y, 0);
            group.current.getObjectByName("Spine2").lookAt(target);
        }
    })




    // play animation using useEffect
    useEffect(() => {
        // actions['Typing'].reset().play();
        actions[animation].reset().fadeIn(0.5).play();

        return () => {
            actions[animation].reset().fadeOut(0.5).stop();
        }
    }, [animation]);

    // add wireframe
    useEffect(() => {
        Object.values(materials).forEach((material) => {
            material.wireframe = wireframe;
        });
    }, [wireframe]);




    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes, materials } = useGraph(clone)
    return (
        <group {...props} ref={group} dispose={null}>
            <group rotation-x={-Math.PI / 2}>
                <primitive object={nodes.Hips} />
                <skinnedMesh
                    geometry={nodes.beard.geometry}
                    material={materials.beard}
                    skeleton={nodes.beard.skeleton} />
                <skinnedMesh
                    geometry={nodes.body.geometry}
                    material={materials.body}
                    skeleton={nodes.body.skeleton} />
                <skinnedMesh
                    geometry={nodes.bottom.geometry}
                    material={materials.bottom}
                    skeleton={nodes.bottom.skeleton} />
                <skinnedMesh
                    geometry={nodes.eye_left.geometry}
                    material={materials.eye}
                    skeleton={nodes.eye_left.skeleton} />
                <skinnedMesh
                    geometry={nodes.eye_right.geometry}
                    material={materials.eye}
                    skeleton={nodes.eye_right.skeleton} />
                <skinnedMesh
                    geometry={nodes.footwear.geometry}
                    material={materials.footwear}
                    skeleton={nodes.footwear.skeleton} />
                <skinnedMesh
                    geometry={nodes.glasses.geometry}
                    material={materials.glasses}
                    skeleton={nodes.glasses.skeleton} />
                <skinnedMesh
                    geometry={nodes.hair.geometry}
                    material={materials.hair}
                    skeleton={nodes.hair.skeleton} />
                <skinnedMesh
                    geometry={nodes.head.geometry}
                    material={materials.head}
                    skeleton={nodes.head.skeleton} />
                <skinnedMesh
                    geometry={nodes.teeth.geometry}
                    material={materials.teeth}
                    skeleton={nodes.teeth.skeleton} />
                <skinnedMesh
                    geometry={nodes.tongue.geometry}
                    material={materials.teeth}
                    skeleton={nodes.tongue.skeleton} />
                <skinnedMesh
                    geometry={nodes.top.geometry}
                    material={materials.top}
                    skeleton={nodes.top.skeleton} />
            </group>
        </group>
    )
}

useGLTF.preload('models/67fc054bed51bc585e271473.glb')
